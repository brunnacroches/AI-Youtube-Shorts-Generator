from Components.YoutubeDownloader import download_youtube_video
from Components.Edit import extractAudio, crop_video
from Components.Transcription import transcribeAudio
from Components.LanguageTasks import GetHighlight, GetMultipleHighlights
from Components.FaceCrop import crop_to_vertical, combine_videos
import os
import sys
import time

def check_prerequisites():
    missing = []
    
    # Verificar se os diret√≥rios necess√°rios existem
    if not os.path.exists("videos"):
        try:
            os.makedirs("videos")
            print("Criado diret√≥rio 'videos'")
        except:
            missing.append("N√£o foi poss√≠vel criar o diret√≥rio 'videos'")
    
    # Verificar se existe um diret√≥rio para outputs
    if not os.path.exists("outputs"):
        try:
            os.makedirs("outputs")
            print("Criado diret√≥rio 'outputs'")
        except:
            missing.append("N√£o foi poss√≠vel criar o diret√≥rio 'outputs'")
    
    # Verificar se os arquivos de modelo existem
    if not os.path.exists("models/deploy.prototxt") or not os.path.exists("models/res10_300x300_ssd_iter_140000_fp16.caffemodel"):
        missing.append("Arquivos de modelo (na pasta 'models')")
    
    if missing:
        print("\n‚ö†Ô∏è Aviso: Os seguintes pr√©-requisitos est√£o faltando:")
        for item in missing:
            print(f"  - {item}")
        print("\nVoc√™ pode continuar, mas algumas funcionalidades podem n√£o funcionar corretamente.")
        input("Pressione Enter para continuar...")
    
    return len(missing) == 0

def process_single_highlight(Vid, Audio, transcriptions, start, end, index=1):
    """Processa um √∫nico destaque e retorna o caminho do arquivo final."""
    try:
        # Definir nomes de arquivos para este clipe
        Output = f"outputs/Out_{index}.mp4"
        croped = f"outputs/Croped_{index}.mp4"
        final_output = f"outputs/Final_{index}.mp4"
        
        # Cortar v√≠deo
        print(f"\nProcessando Clipe {index} - Cortando o v√≠deo de {start}s at√© {end}s...")
        if not crop_video(Vid, Output, start, end):
            print(f"‚ùå Erro: N√£o foi poss√≠vel cortar o v√≠deo para o clipe {index}.")
            return None
            
        print(f"‚úÖ V√≠deo cortado salvo em: {Output}")

        # Corte vertical
        print(f"Criando corte vertical (identificando faces) para o clipe {index}...")
        if not crop_to_vertical(Output, croped):
            print(f"‚ùå Erro: N√£o foi poss√≠vel criar o corte vertical para o clipe {index}.")
            return None
            
        print(f"‚úÖ Corte vertical salvo em: {croped}")

        # Combinar v√≠deos
        print(f"Combinando v√≠deo e √°udio para o resultado final do clipe {index}...")
        if not combine_videos(Output, croped, final_output):
            print(f"‚ùå Erro: N√£o foi poss√≠vel combinar os v√≠deos para o clipe {index}.")
            return None
            
        print(f"üé¨ Clipe {index} conclu√≠do: {final_output}")
        print(f"   Dura√ß√£o: {end-start:.1f} segundos")
        
        return final_output
    except Exception as e:
        print(f"Erro ao processar o clipe {index}: {e}")
        return None

def main():
    print("\n=== AI YouTube Shorts Generator ===\n")
    print("Este programa baixa um v√≠deo do YouTube, identifica os destaques, e cria")
    print("v√≠deos verticais otimizados para plataformas de shorts.")
    print("\nPr√©-requisitos:")
    print("- Python 3.7+")
    print("- FFmpeg (recomendado)")
    print("- Modelos de detec√ß√£o facial\n")
    
    # Verificar pr√©-requisitos
    check_prerequisites()
    
    # Entrada do URL do YouTube
    try:
        url = input("\nDigite o URL do v√≠deo do YouTube: ")
        print("\nBaixando v√≠deo do YouTube...")
        Vid = download_youtube_video(url)
        
        if not Vid:
            print("\n‚ùå Erro: N√£o foi poss√≠vel baixar o v√≠deo.")
            return
            
        Vid = Vid.replace(".webm", ".mp4")
        print(f"\n‚úÖ V√≠deo baixado com sucesso em: {Vid}")

        # Extrair √°udio
        print("\nExtraindo √°udio do v√≠deo...")
        Audio = extractAudio(Vid)
        
        if not Audio:
            print("\n‚ùå Erro: N√£o foi poss√≠vel extrair o √°udio do v√≠deo.")
            return
            
        print(f"‚úÖ √Åudio extra√≠do em: {Audio}")

        # Transcrever √°udio
        print("\nTranscrevendo √°udio (isso pode levar alguns minutos)...")
        start_time = time.time()
        transcriptions = transcribeAudio(Audio)
        
        if not transcriptions or len(transcriptions) == 0:
            print("\n‚ùå Erro: N√£o foi poss√≠vel transcrever o √°udio.")
            return
            
        print(f"‚úÖ Transcri√ß√£o conclu√≠da em {time.time() - start_time:.1f} segundos")

        # Preparar texto da transcri√ß√£o
        TransText = ""
        for text, start, end in transcriptions:
            TransText += (f"{start} - {end}: {text}\n")

        # Perguntar ao usu√°rio quantas partes ele deseja
        while True:
            try:
                num_parts = input("\nEm quantas partes voc√™ deseja dividir o v√≠deo? (1-5): ")
                num_parts = int(num_parts)
                if 1 <= num_parts <= 5:
                    break
                else:
                    print("Por favor, escolha um n√∫mero entre 1 e 5.")
            except ValueError:
                print("Por favor, digite um n√∫mero v√°lido.")
        
        # Processar de acordo com o n√∫mero de partes
        if num_parts == 1:
            # Modo original - um √∫nico destaque
            print("\nIdentificando o momento de destaque...")
            start, end = GetHighlight(TransText)
            
            if start == 0 and end == 0:
                print("\n‚ùå Erro: N√£o foi poss√≠vel identificar destaques no v√≠deo.")
                return
                
            print(f"‚úÖ Destaque identificado: {start}s at√© {end}s")
            
            # Processar o √∫nico destaque
            final_path = process_single_highlight(Vid, Audio, transcriptions, start, end)
            
            if final_path:
                print(f"\nüéâ Processo conclu√≠do com sucesso!")
                print(f"üì± Seu v√≠deo vertical est√° pronto em: {final_path}")
            
        else:
            # Modo m√∫ltiplos destaques
            print(f"\nIdentificando {num_parts} momentos de destaque...")
            highlights = GetMultipleHighlights(TransText, num_parts)
            
            if not highlights:
                print("\n‚ùå Erro: N√£o foi poss√≠vel identificar destaques no v√≠deo.")
                return
            
            print(f"‚úÖ {len(highlights)} destaques identificados para processamento")
            
            # Processar cada destaque
            successful_clips = []
            for idx, (start, end, content) in enumerate(highlights):
                print(f"\n--- Processando Clipe {idx+1}/{len(highlights)} ---")
                print(f"Intervalo: {start}s - {end}s (Dura√ß√£o: {end-start}s)")
                print(f"Conte√∫do: {content[:100]}...")
                
                final_path = process_single_highlight(Vid, Audio, transcriptions, start, end, idx+1)
                if final_path:
                    successful_clips.append(final_path)
            
            # Resumo final
            if successful_clips:
                print(f"\nüéâ Processo conclu√≠do! {len(successful_clips)}/{len(highlights)} clipes gerados com sucesso!")
                print("\nClipes gerados:")
                for idx, path in enumerate(successful_clips):
                    print(f"  üì± Clipe {idx+1}: {path}")
            else:
                print("\n‚ùå Nenhum clipe foi gerado com sucesso.")

    except KeyboardInterrupt:
        print("\n\nOpera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()